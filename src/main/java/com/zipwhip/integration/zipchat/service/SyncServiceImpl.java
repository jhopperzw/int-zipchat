package com.zipwhip.integration.zipchat.service;

import com.zipwhip.integration.bi.domain.Stats;
import com.zipwhip.integration.bi.domain.StatsMetadataBuilder;
import com.zipwhip.integration.bi.service.StatsSenderService;
import com.zipwhip.integration.zipchat.entities.OrgConfig;
import com.zipwhip.message.domain.InboundMessage;
import com.zipwhip.message.utils.MessageUtils;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

/**
 * This class is used to perform sync functionality agnostic of the input source. If can be used to
 * sync a message to ZipChat (which will sync the contact to Zipwhip) or it can be used to Sync a
 * contact into ZipChat
 */
@Slf4j
@Service
public class SyncServiceImpl implements SyncService {

  /**
   * The service to use for logging usage statistics
   */
  @Autowired
  private StatsSenderService statsSenderService;

  /**
   * The ID of the ZipChat integration
   */
  @Value("${poller.integrationId}")
  private long integrationId;

  /**
   * Processes a message sent or received by an integrated landline. This will first find potential
   * contacts by mobile phone. Then it will sync (new and or update) contacts into Zipwhip. Finally,
   * it will attach the message to the appropriate claims in ZipChat.
   *
   * @param message   The message that was sent/received by the landline
   * @param orgConfig The orgConfig for the orgCustomer to which the landline belongs
   */
  @Override
  public void processMessage(InboundMessage message, OrgConfig orgConfig) {
  }

  /**
   * @param label            The feature which is logging activity
   * @param message          The message that was synced
   * @param orgConfig        The orgConfig of the org customer for whom the sync was performed
   * @param messagePublicIds The list of message publicIDs which were generated by the sync
   */
  private void logMessageSyncStats(String label, InboundMessage message, OrgConfig orgConfig,
    List<String> messagePublicIds) {
    StatsMetadataBuilder metaDataBuilder = StatsMetadataBuilder.instance()
      .add("Landline", MessageUtils.getLandline(message));

    Stats stats = Stats.getInstance(integrationId, orgConfig.getOrgCustomerId())
      .addItem(label, (messagePublicIds != null ? messagePublicIds.size() : 0), metaDataBuilder);

    statsSenderService.send(stats);
  }
}
